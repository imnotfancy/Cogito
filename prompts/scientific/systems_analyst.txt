"""
Scientific Critique Prompt - Systems Analysis Framework (V1.0)
Focuses on systematic functional analysis, component relationships, optimization, and emergent properties.
Employs pure scientific methodology with no philosophical terminology.
"""

Evaluate the set of checklist steps provided below using a comprehensive systems analysis approach. Focus on functional relationships, organizational structure, component interactions, and system efficiency. Present your findings from the perspective of an objective systems analyst using scientifically rigorous methods.

CONTEXT:
{context}

GOAL OF THE CHECKLIST (Implicit or Explicit):
{goal}  # (Optional: If goal context is separable)

STEPS TO CRITIQUE:
{steps}

Your critique MUST analyze the following dimensions:

1.  **Analysis of System Purpose and Functional Coherence:**
    * Identify the explicit or implicit function of the entire system. Is this function clearly defined and appropriate for the activity described in the context?
    * Evaluate how directly each component contributes to the system's function. Does each component inherently advance the overall purpose, or is it merely auxiliary?
    * Assess if the overall architecture represents the most effective configuration to realize the intended outcome. Does it demonstrate functional optimization relevant to the context?

2.  **Analysis of Component Relationships and Dependencies:**
    * **Functional Units:** What are the fundamental components, resources, data, or actions required or manipulated by these steps? Are these components suitable for the intended structure and purpose?
    * **Structural Organization:** What is the underlying architecture, sequence, or design defined by these steps? Is the structure logical, coherent, and well-organized? Does it reflect an efficient plan?
    * **Operational Mechanism:** What process or mechanism is responsible for carrying out these steps? Is this means of execution capable, reliable, and appropriate for bringing about the intended change?
    * **Functional Alignment:** Ensure the components, structure, and execution method consistently serve the overall intended outcome.

3.  **Evaluation of Operational Efficiency and Adaptation:**
    * Examine the steps for evidence of optimal resource utilization regarding how to act effectively *and* appropriately within this specific context. Do they appropriately consider the particular details and potential variations of the situation?
    * Analyze the steps in relation to achieving a balanced approach, avoiding deficiency or excess in execution (e.g., balancing thoroughness with efficiency, balancing risk mitigation with progress). Identify specific ways the proposed actions might be promoting or neglecting efficient execution.
    * Distinguish between steps that are merely technically correct versus those that also embody efficient allocation of resources to achieve the desired outcome effectively and appropriately.

4.  **Integrative System Logic Assessment:**
    * Assess the logical flow of the sequence. Does each step follow reasonably or necessarily from the preceding ones and the overall goal? Evaluate the connections based on sound scientific reasoning.
    * Examine the definitions and assumptions underlying the steps. Are they clear, consistent, and supported by evidence?

5.  **Progression and System Development Analysis:**
    * Analyze how the sequence of steps facilitates the transition from the initial state to the desired outcome state.
    * Identify intermediate states or milestones achieved by specific steps or phases. Is the progression efficient and logical in terms of reaching the final outcome?

6.  **Structural Optimization Assessment:**
    * Evaluate whether the steps are appropriately grouped and organized according to their function and purpose.
    * Is the organizational scheme clear and conducive to efficient system operation and understanding?

7.  **Empirical Foundation Assessment:**
    * Assess whether the steps are grounded in empirical evidence, systematic observation, or established scientific principles relevant to the domain, rather than being purely abstract or theoretical where practical grounding is needed.

**Important Constraints:**
* **Voice:** Maintain a neutral, objective, analytical tone, like that of an impartial systems analyst focused on function and structure.
* **Language:** Use precise, scientific terminology focused on systems, components, functions, optimization, and empirical evidence. Avoid philosophical concepts or jargon.
* **Persona:** Do *not* adopt any specific persona beyond that of a methodical systems analyst.

**Output Requirements:**

Return ONLY a JSON object following the structure shown in the example below. Generate one primary critique point based on your analysis.
* `claim`: (string) The specific critique point.
* `evidence`: (string) Supporting evidence or reasoning based on functional systems analysis principles outlined above, referencing the provided steps/context.
* `confidence`: (float) Analyst's confidence in this critique (0.0-1.0).
* `severity`: (string) Estimated impact ('Low', 'Medium', 'High', 'Critical').
* `recommendation`: (string) A concrete suggestion aligned with systems analysis principles to address the critique.
* `concession`: (string) A brief acknowledgement of a potential counter-argument, limitation of the critique, or a related positive aspect of the analyzed step/content (e.g., "While perhaps overly detailed, this does ensure clarity," or "This critique assumes stable system conditions; high variability might justify this approach."). If no concession seems appropriate, state "None".

**Output Format Example (Illustrates structure only, not required content):**
```json
{{
  "claim": "The specified sequence for Components A and B creates an inefficient process flow that impedes overall system performance.",
  "evidence": "Component A outputs data that Component B must entirely reprocess, creating redundant calculation cycles that consume unnecessary system resources. The data validation occurring at step 3 could be consolidated with the transformation in step 5 to eliminate this redundancy.",
  "confidence": 0.85,
  "severity": "Medium",
  "recommendation": "Merge the validation and transformation functions into a single pipeline component that processes the data exactly once, reducing computational overhead and streamlining the process flow.",
  "concession": "However, the separation of these functions does provide clearer error attribution when debugging system failures, which may be valuable in certain high-reliability contexts."
}}
